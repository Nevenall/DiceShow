//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.4-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Dice.g4 by ANTLR 4.5.4-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DiceShow.Ops.Parsing.Internal {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.4-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DiceLexer : Lexer {
	public const int
		T__0=1, T__1=2, ID=3, SEPARATOR=4, INT=5, PLUS=6, PLUSPLUS=7, MINUS=8, 
		MINUSMINUS=9, DROP=10, KEEP=11, COUNT=12, REROLL=13, EXPLODE=14, HIT=15, 
		LOWEST=16, HIGHEST=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "ID", "SEPARATOR", "INT", "PLUS", "PLUSPLUS", "MINUS", 
		"MINUSMINUS", "DROP", "KEEP", "COUNT", "REROLL", "EXPLODE", "HIT", "LOWEST", 
		"HIGHEST"
	};

	  
		public const string GrammarVersion = "1.0.0";
		public const string VersionReleaseNotes = @"
			1.0.0 - Support for expression and result keywords
			0.1.2 - removed ; as a SEPARATOR option
			0.1.1 - Moved SEPARATOR
			0.1.0 - Multiple dice in groups with optional labels.
		";


	public DiceLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'d'", "'D'", null, null, null, "'+'", "'++'", "'-'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "ID", "SEPARATOR", "INT", "PLUS", "PLUSPLUS", "MINUS", 
		"MINUSMINUS", "DROP", "KEEP", "COUNT", "REROLL", "EXPLODE", "HIT", "LOWEST", 
		"HIGHEST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13\xCD\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x6"+
		"\x4+\n\x4\r\x4\xE\x4,\x3\x5\x3\x5\x3\x6\x6\x6\x32\n\x6\r\x6\xE\x6\x33"+
		"\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\vL\n\v\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\fZ\n\f\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\rk\n\r\x3\xE"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x7F\n\xE\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x96\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\xA1\n\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xB5\n\x11\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x5\x12\xCC\n\x12\x2\x2\x2\x13\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2"+
		"\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2"+
		"\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13\x3\x2\x5\x4\x2\x43\\\x63|\x4"+
		"\x2\"\"..\x3\x2\x32;\xDE\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2"+
		"\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2"+
		"\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17"+
		"\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2"+
		"\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x3%\x3\x2\x2\x2\x5"+
		"\'\x3\x2\x2\x2\a*\x3\x2\x2\x2\t.\x3\x2\x2\x2\v\x31\x3\x2\x2\x2\r\x35\x3"+
		"\x2\x2\x2\xF\x37\x3\x2\x2\x2\x11:\x3\x2\x2\x2\x13<\x3\x2\x2\x2\x15K\x3"+
		"\x2\x2\x2\x17Y\x3\x2\x2\x2\x19j\x3\x2\x2\x2\x1B~\x3\x2\x2\x2\x1D\x95\x3"+
		"\x2\x2\x2\x1F\xA0\x3\x2\x2\x2!\xB4\x3\x2\x2\x2#\xCB\x3\x2\x2\x2%&\a\x66"+
		"\x2\x2&\x4\x3\x2\x2\x2\'(\a\x46\x2\x2(\x6\x3\x2\x2\x2)+\t\x2\x2\x2*)\x3"+
		"\x2\x2\x2+,\x3\x2\x2\x2,*\x3\x2\x2\x2,-\x3\x2\x2\x2-\b\x3\x2\x2\x2./\t"+
		"\x3\x2\x2/\n\x3\x2\x2\x2\x30\x32\t\x4\x2\x2\x31\x30\x3\x2\x2\x2\x32\x33"+
		"\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\f\x3\x2\x2\x2"+
		"\x35\x36\a-\x2\x2\x36\xE\x3\x2\x2\x2\x37\x38\a-\x2\x2\x38\x39\a-\x2\x2"+
		"\x39\x10\x3\x2\x2\x2:;\a/\x2\x2;\x12\x3\x2\x2\x2<=\a/\x2\x2=>\a/\x2\x2"+
		">\x14\x3\x2\x2\x2?@\a\x66\x2\x2@\x41\at\x2\x2\x41\x42\aq\x2\x2\x42L\a"+
		"r\x2\x2\x43\x44\a\x46\x2\x2\x44\x45\at\x2\x2\x45\x46\aq\x2\x2\x46L\ar"+
		"\x2\x2GH\a\x46\x2\x2HI\aT\x2\x2IJ\aQ\x2\x2JL\aR\x2\x2K?\x3\x2\x2\x2K\x43"+
		"\x3\x2\x2\x2KG\x3\x2\x2\x2L\x16\x3\x2\x2\x2MN\am\x2\x2NO\ag\x2\x2OP\a"+
		"g\x2\x2PZ\ar\x2\x2QR\aM\x2\x2RS\ag\x2\x2ST\ag\x2\x2TZ\ar\x2\x2UV\aM\x2"+
		"\x2VW\aG\x2\x2WX\aG\x2\x2XZ\aR\x2\x2YM\x3\x2\x2\x2YQ\x3\x2\x2\x2YU\x3"+
		"\x2\x2\x2Z\x18\x3\x2\x2\x2[\\\a\x65\x2\x2\\]\aq\x2\x2]^\aw\x2\x2^_\ap"+
		"\x2\x2_k\av\x2\x2`\x61\a\x45\x2\x2\x61\x62\aq\x2\x2\x62\x63\aw\x2\x2\x63"+
		"\x64\ap\x2\x2\x64k\av\x2\x2\x65\x66\a\x45\x2\x2\x66g\aQ\x2\x2gh\aW\x2"+
		"\x2hi\aP\x2\x2ik\aV\x2\x2j[\x3\x2\x2\x2j`\x3\x2\x2\x2j\x65\x3\x2\x2\x2"+
		"k\x1A\x3\x2\x2\x2lm\at\x2\x2mn\ag\x2\x2no\at\x2\x2op\aq\x2\x2pq\an\x2"+
		"\x2q\x7F\an\x2\x2rs\aT\x2\x2st\ag\x2\x2tu\at\x2\x2uv\aq\x2\x2vw\an\x2"+
		"\x2w\x7F\an\x2\x2xy\aT\x2\x2yz\aG\x2\x2z{\aT\x2\x2{|\aQ\x2\x2|}\aN\x2"+
		"\x2}\x7F\aN\x2\x2~l\x3\x2\x2\x2~r\x3\x2\x2\x2~x\x3\x2\x2\x2\x7F\x1C\x3"+
		"\x2\x2\x2\x80\x81\ag\x2\x2\x81\x82\az\x2\x2\x82\x83\ar\x2\x2\x83\x84\a"+
		"n\x2\x2\x84\x85\aq\x2\x2\x85\x86\a\x66\x2\x2\x86\x96\ag\x2\x2\x87\x88"+
		"\aG\x2\x2\x88\x89\az\x2\x2\x89\x8A\ar\x2\x2\x8A\x8B\an\x2\x2\x8B\x8C\a"+
		"q\x2\x2\x8C\x8D\a\x66\x2\x2\x8D\x96\ag\x2\x2\x8E\x8F\aG\x2\x2\x8F\x90"+
		"\aZ\x2\x2\x90\x91\aR\x2\x2\x91\x92\aN\x2\x2\x92\x93\aQ\x2\x2\x93\x94\a"+
		"\x46\x2\x2\x94\x96\aG\x2\x2\x95\x80\x3\x2\x2\x2\x95\x87\x3\x2\x2\x2\x95"+
		"\x8E\x3\x2\x2\x2\x96\x1E\x3\x2\x2\x2\x97\x98\aj\x2\x2\x98\x99\ak\x2\x2"+
		"\x99\xA1\av\x2\x2\x9A\x9B\aJ\x2\x2\x9B\x9C\ak\x2\x2\x9C\xA1\av\x2\x2\x9D"+
		"\x9E\aJ\x2\x2\x9E\x9F\aK\x2\x2\x9F\xA1\aV\x2\x2\xA0\x97\x3\x2\x2\x2\xA0"+
		"\x9A\x3\x2\x2\x2\xA0\x9D\x3\x2\x2\x2\xA1 \x3\x2\x2\x2\xA2\xA3\an\x2\x2"+
		"\xA3\xA4\aq\x2\x2\xA4\xA5\ay\x2\x2\xA5\xA6\ag\x2\x2\xA6\xA7\au\x2\x2\xA7"+
		"\xB5\av\x2\x2\xA8\xA9\aN\x2\x2\xA9\xAA\aq\x2\x2\xAA\xAB\ay\x2\x2\xAB\xAC"+
		"\ag\x2\x2\xAC\xAD\au\x2\x2\xAD\xB5\av\x2\x2\xAE\xAF\aN\x2\x2\xAF\xB0\a"+
		"Q\x2\x2\xB0\xB1\aY\x2\x2\xB1\xB2\aG\x2\x2\xB2\xB3\aU\x2\x2\xB3\xB5\aV"+
		"\x2\x2\xB4\xA2\x3\x2\x2\x2\xB4\xA8\x3\x2\x2\x2\xB4\xAE\x3\x2\x2\x2\xB5"+
		"\"\x3\x2\x2\x2\xB6\xB7\aj\x2\x2\xB7\xB8\ak\x2\x2\xB8\xB9\ai\x2\x2\xB9"+
		"\xBA\aj\x2\x2\xBA\xBB\ag\x2\x2\xBB\xBC\au\x2\x2\xBC\xCC\av\x2\x2\xBD\xBE"+
		"\aJ\x2\x2\xBE\xBF\ak\x2\x2\xBF\xC0\ai\x2\x2\xC0\xC1\aj\x2\x2\xC1\xC2\a"+
		"g\x2\x2\xC2\xC3\au\x2\x2\xC3\xCC\av\x2\x2\xC4\xC5\aJ\x2\x2\xC5\xC6\aK"+
		"\x2\x2\xC6\xC7\aI\x2\x2\xC7\xC8\aJ\x2\x2\xC8\xC9\aG\x2\x2\xC9\xCA\aU\x2"+
		"\x2\xCA\xCC\aV\x2\x2\xCB\xB6\x3\x2\x2\x2\xCB\xBD\x3\x2\x2\x2\xCB\xC4\x3"+
		"\x2\x2\x2\xCC$\x3\x2\x2\x2\r\x2,\x33KYj~\x95\xA0\xB4\xCB\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace DiceShow.Ops.Parsing.Internal
