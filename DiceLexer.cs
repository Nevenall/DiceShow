//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Dice.g4 by ANTLR 4.5.3.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class DiceLexer : Lexer {
	public const int
		LABEL=1, SEMICOLON=2, NUMBER=3, SIDES=4, DEE=5, EHPH=6;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LABEL", "SEMICOLON", "NUMBER", "SIDES", "DEE", "EHPH"
	};


	public DiceLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LABEL", "SEMICOLON", "NUMBER", "SIDES", "DEE", "EHPH"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Dice.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\b$\b\x1\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x6\x2\x11"+
		"\n\x2\r\x2\xE\x2\x12\x3\x3\x3\x3\x3\x4\x6\x4\x18\n\x4\r\x4\xE\x4\x19\x3"+
		"\x5\x6\x5\x1D\n\x5\r\x5\xE\x5\x1E\x3\x6\x3\x6\x3\a\x3\a\x2\x2\x2\b\x3"+
		"\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\x3\x2\x6\x6\x2\"\"..\x43"+
		"\\\x63|\x3\x2\x32;\x4\x2\x46\x46\x66\x66\x4\x2HHhh&\x2\x3\x3\x2\x2\x2"+
		"\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2"+
		"\x2\r\x3\x2\x2\x2\x3\x10\x3\x2\x2\x2\x5\x14\x3\x2\x2\x2\a\x17\x3\x2\x2"+
		"\x2\t\x1C\x3\x2\x2\x2\v \x3\x2\x2\x2\r\"\x3\x2\x2\x2\xF\x11\t\x2\x2\x2"+
		"\x10\xF\x3\x2\x2\x2\x11\x12\x3\x2\x2\x2\x12\x10\x3\x2\x2\x2\x12\x13\x3"+
		"\x2\x2\x2\x13\x4\x3\x2\x2\x2\x14\x15\a<\x2\x2\x15\x6\x3\x2\x2\x2\x16\x18"+
		"\t\x3\x2\x2\x17\x16\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2"+
		"\x19\x1A\x3\x2\x2\x2\x1A\b\x3\x2\x2\x2\x1B\x1D\t\x3\x2\x2\x1C\x1B\x3\x2"+
		"\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x1C\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F"+
		"\n\x3\x2\x2\x2 !\t\x4\x2\x2!\f\x3\x2\x2\x2\"#\t\x5\x2\x2#\xE\x3\x2\x2"+
		"\x2\x6\x2\x12\x19\x1E\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
